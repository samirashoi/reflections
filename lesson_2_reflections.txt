What happens when you initialize a repository? Why do you need to do it?

	It creates a git repo that will track all your files that you add to the repo.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area allows us to specify which files to be included in a single commit. It allows to logically separate different commits.

How can you use the staging area to make sure you have one commit per logical
change?

	By combining files to stage that constitute a single logical change and commiting it, it is very easy to separate logical changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are useful for adding experimental features in a way that it doesn't break the whole application.	

How do the diagrams help you visualize the branch structure?

	Diagrams visually represent the relationship between different commits and therefore, easily shows if is possible to move from one commit to one another. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The commonalities of the two different branches remain whereas the code deleted in one branch gets deleted whereas the code added in any one branch gets added to the merged repo. We represent it like that since it joins the contents of two files together.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Pros of Git's automatic merging:
		-> Git automatically fixes our issues
		-> If there is a conflict, Git will ask us to review the changes instead of guessing which one we want, thus avoiding uncompilable code.
	Cons of merging manually:
		-> We may have to copy and paste two files side-by-side to find out the differences between them, making it very tedious.
		-> Forgetting to copy some part of the changed code may break the whole program. 